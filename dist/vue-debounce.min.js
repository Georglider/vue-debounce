(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global = global || self, global.vueDebounce = factory());
}(this, function () { 'use strict';

  function convertTime (time) {
    var ref = String(time).split(/(ms|s)/i);
    var amt = ref[0];
    var t = ref[1]; if ( t === void 0 ) t = 'ms';
    var types = {
      ms: 1,
      s: 1000
    };

    return Number(amt) * types[t]
  }

  function debounce (fn, wait) {
    if ( wait === void 0 ) wait = '300ms';

    var timeout = null;
    var timer = convertTime(wait);

    var debounced = function () {
      var args = [], len = arguments.length;
      while ( len-- ) args[ len ] = arguments[ len ];

      var later = function () {
        timeout = null;

        fn.apply(void 0, args);
      };

      clearTimeout(timeout);
      timeout = setTimeout(later, timer);

      if (!timeout) {
        fn.apply(void 0, args);
      }
    };

    debounced.cancel = function () {
      clearTimeout(timeout);
      timeout = null;
    };

    return debounced
  }

  var index = {
    name: 'debounce',
    install: function install (Vue, ref) {
      if ( ref === void 0 ) ref = {};
      var lock = ref.lock;
      var listenTo = ref.listenTo; if ( listenTo === void 0 ) listenTo = 'onkeyup';

      Vue.directive('debounce', {
        bind: function bind (el, ref) {
          var value = ref.value;
          var arg = ref.arg;
          var modifiers = ref.modifiers;

          if (typeof el[listenTo] === 'undefined') {
            throw new Error(("Event Listener " + listenTo + " does not exist"))
          }
          var fn = debounce(function (target) {
            value(target.value);
          }, arg);
          var isUnlocked = (!modifiers.lock && !lock) || modifiers.unlock;

          el[listenTo] = function (ref) {
            var keyCode = ref.keyCode;
            var target = ref.target;

            if (keyCode === 13 && isUnlocked) {
              fn.cancel();
              value(target.value);
            }

            if (keyCode !== 13) {
              fn(target);
            }
          };
        }
      });
    }
  };

  return index;

}));
